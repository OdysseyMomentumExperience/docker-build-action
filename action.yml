name: 'Docker build action'
description: 'Odyssey docker build image action'
inputs:
  image-name:
    description: "Name of the docker image, defaults to git repository name"
    required: true
    default: ${{ github.event.repository.name }}
  registry-server:
    description: "Docker registry location/URL"
    required: true
  registry-user:
    description: "Docker registry username"
    required: true
  registry-pass:
    description: "Docker registry password"
    required: true
  npm-token:
    required: false
    description: "Access token for private (npm) packages."
  backfeed-repo-token:
    required: false
    description: "Github token to passthrough docker build to access current repo"
  github-token:
    required: false
    description: "Github token. Used tyo login to ghcr.io"
  multistage-target:
    required: false
    description: "Docker build target for multistage builds."
  extra-args:
    required: false
    description: "Command line arguments added to the docker build call."
  git-lfs:
    description: "Enable Git-LFS"
    required: false
    default: "true"
outputs:
  version:
    description: "Version string generated for the image."
    value: ${{ steps.setvars.outputs.version }}
runs:
  using: "composite"
  steps:
    - id: setvars
      name: ${{github.event_name}}-${{github.event.ref }}
      shell: bash
      run: |
        if [ "${{ github.event_name }}" = "schedule" ]; then
          VERSION=nightly
        elif [[ $GITHUB_REF == refs/tags/* ]]; then
          VERSION=${GITHUB_REF#refs/tags/}
        elif [[ $GITHUB_REF == refs/heads/release/* ]]; then
          VERSION="release"
        elif [[ $GITHUB_REF == refs/heads/* ]]; then
          VERSION=$(echo ${GITHUB_REF#refs/heads/} | sed -r 's#/+#-#g')
        elif [[ $GITHUB_REF == refs/pull/* ]]; then
          VERSION=pr-${{ github.event.number }}
        fi
        echo "VERSION=${VERSION}" >> $GITHUB_ENV
        echo "version=${VERSION}" >> $GITHUB_OUTPUT

    # checkout the repo
    - name: "Checkout GitHub Action"
      uses: actions/checkout@8e5e7e5ab8b370d6c329ec480221332ada57f0ab  # v3.0.3
      with:
        submodules: true
        lfs: ${{ inputs.git-lfs }}
        fetch-depth: 0
    - name: "git lfs"  # Workaround actions/checkout#270
      if: inputs.git-lfs == 'true'
      shell: bash
      run: git lfs pull
    - id: build_meta
      name: "Set git build metadata"
      shell: bash
      run: |
        BUILD_VERSION=$(git describe --tags || echo "${{github.sha}}")
        SOURCE_DATE_EPOCH=$(git log -1 --pretty=%ct)
        echo "version=${BUILD_VERSION}" >> $GITHUB_OUTPUT
        echo "source_date_epoch=${SOURCE_DATE_EPOCH}" >> $GITHUB_OUTPUT

    - name: "Github packages authorization"
      shell: bash
      env:
        NPM_TOKEN: ${{ inputs.npm-token }}
      run: |
        echo "@momentum-xyz:registry=https://npm.pkg.github.com/" > $HOME/.npmrc
        echo "//npm.pkg.github.com/:_authToken=${NPM_TOKEN}" >> $HOME/.npmrc

    - name: "Build image"
      env:
        AZURE_IMAGE: ${{ inputs.registry-server }}/${{ inputs.image-name }}
        GITHUB_IMAGE: ghcr.io/momentum-xyz/${{ inputs.image-name }}
        DOCKER_BUILD_TARGET: ${{ inputs.multistage-target }}
        DOCKER_EXTRA_ARGS: ${{ inputs.extra-args }}
        DOCKER_BUILDKIT: 1
      shell: bash
      run: |
        args=(
          --build-arg GITHUB_TOKEN=${{ inputs.backfeed-repo-token }}
          --build-arg BUILD_VERSION=${{ steps.build_meta.outputs.version }}
          --build-arg SOURCE_DATE_EPOCH=${{ steps.build_meta.outputs.source_date_epoch }}
          --secret id=npm,src=$HOME/.npmrc
          --tag ${AZURE_IMAGE}:${{ steps.build_meta.outputs.version }} --tag ${AZURE_IMAGE}:${VERSION}
          --tag ${GITHUB_IMAGE}:${{ steps.build_meta.outputs.version }} --tag ${GITHUB_IMAGE}:${VERSION}
          --file Dockerfile
        )
        [ -n "${DOCKER_BUILD_TARGET}" ] && args+=( --target=$DOCKER_BUILD_TARGET )
        [ -n "${DOCKER_EXTRA_ARGS}" ] && args+=( $DOCKER_EXTRA_ARGS )
        docker build "${args[@]}" .

    - name: "Azure Docker login"
      uses: azure/docker-login@83efeb77770c98b620c73055fbb59b2847e17dc0  # v1.0.1
      with:
        login-server: ${{ inputs.registry-server }}
        username: ${{ inputs.registry-user }}
        password: ${{ inputs.registry-pass }}

    - name: "Push image to Azure"
      env:
        IMAGE: ${{ inputs.registry-server }}/${{ inputs.image-name }}
      shell: bash
      run: |
        docker push ${IMAGE}:${{ steps.build_meta.outputs.version }}
        docker push ${IMAGE}:${VERSION}

    - name: "Github Docker login"
      uses: docker/login-action@f4ef78c080cd8ba55a85445d5b36e214a81df20a  # v2.1.0
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ inputs.github-token }}

    - name: "Push image to Github"
      env:
        IMAGE: ghcr.io/momentum-xyz/${{ inputs.image-name }}
      shell: bash
      run: |
        docker push ${IMAGE}:${{ steps.build_meta.outputs.version }}
        docker push ${IMAGE}:${VERSION}
